name: Simple Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ github.ref_name }}',
              name: 'ATS Scanner ${{ github.ref_name }}',
              body: `## What's Changed
              
              This release includes:
              - Privacy-focused local ATS resume scanning
              - Support for PDF, DOCX, and TXT files  
              - Local Ollama AI model integration
              - Cross-platform compatibility (macOS, Windows, Linux)
              
              ### Installation Instructions
              
              **macOS**: Download the \`.dmg\` file and drag to Applications folder
              **Windows**: Download and run the \`.msi\` installer
              **Linux**: Download the \`.AppImage\` file, make it executable, and run
              
              ### Requirements
              - Ollama installed and running locally
              - At least one AI model downloaded (e.g., \`ollama pull llama2:7b\`)`,
              draft: false,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build the app (macOS)
        if: matrix.platform == 'macos-latest'
        run: npm run build:mac

      - name: Build the app (Windows)
        if: matrix.platform == 'windows-latest'
        run: npm run build

      - name: Build the app (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: npm run build

      - name: List built files (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          echo "Listing contents of src-tauri/target/release/bundle:"
          if (Test-Path "src-tauri/target/release/bundle") { Get-ChildItem -Recurse "src-tauri/target/release/bundle" } else { echo "Bundle directory not found" }
          Get-ChildItem -Recurse "src-tauri/target" -Include "*.msi" | ForEach-Object { echo $_.FullName }

      - name: List built files (Unix)
        if: matrix.platform != 'windows-latest'
        run: |
          echo "Listing contents of src-tauri/target/release/bundle:"
          ls -la src-tauri/target/release/bundle/ || echo "Bundle directory not found"
          find src-tauri/target -name "*.dmg" -o -name "*.msi" -o -name "*.AppImage" || echo "No installers found"

      - name: Upload release assets
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');
            
            const releaseId = ${{ needs.create-release.outputs.release_id }};
            
            // Find all installer files cross-platform
            let assetPaths = [];
            try {
              if (process.platform === 'win32') {
                // Windows: Use PowerShell to find MSI files
                const output = execSync('Get-ChildItem -Recurse "src-tauri/target" -Include "*.msi" | ForEach-Object { $_.FullName }', { 
                  encoding: 'utf8', 
                  shell: 'powershell.exe' 
                });
                assetPaths = output.trim().split('\n').filter(path => path.length > 0);
              } else {
                // Unix: Use find command
                const output = execSync('find src-tauri/target -name "*.dmg" -o -name "*.msi" -o -name "*.AppImage"', { encoding: 'utf8' });
                assetPaths = output.trim().split('\n').filter(path => path.length > 0);
              }
              
              console.log('Found assets:', assetPaths);
              
              for (const assetPath of assetPaths) {
                if (fs.existsSync(assetPath)) {
                  const assetName = path.basename(assetPath);
                  const assetData = fs.readFileSync(assetPath);
                  
                  await github.rest.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: releaseId,
                    name: assetName,
                    data: assetData,
                  });
                  
                  console.log(`Uploaded ${assetName}`);
                } else {
                  console.log(`Asset not found: ${assetPath}`);
                }
              }
              
              if (assetPaths.length === 0) {
                console.log('No installer files found');
              }
            } catch (error) {
              console.log('Error finding assets:', error.message);
            }