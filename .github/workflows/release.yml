name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.1)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-20.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'ATS Scanner ${{ github.ref_name }}'
          releaseBody: |
            ## What's Changed
            
            This release includes:
            - Privacy-focused local ATS resume scanning
            - Support for PDF, DOCX, and TXT files  
            - Local Ollama AI model integration
            - Cross-platform compatibility (macOS, Windows, Linux)
            - Automatic update notifications
            
            ### Installation Instructions
            
            **macOS**: Download the `.dmg` file and drag to Applications folder
            **Windows**: Download and run the `.msi` installer
            **Linux**: Download the `.AppImage` file, make it executable, and run
            
            ### Requirements
            - Ollama installed and running locally
            - At least one AI model downloaded (e.g., `ollama pull llama2:7b`)
            
            See the full changelog and assets below.
          releaseDraft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          includeUpdaterJson: true
          args: ${{ matrix.args }}